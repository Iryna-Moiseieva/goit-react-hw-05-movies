{"version":3,"file":"static/js/168.0eec661e.chunk.js","mappings":"qWAEaA,EAAOC,EAAAA,GAAAA,GAAH,gIASJC,EAAOD,EAAAA,GAAAA,GAAH,oEAKJE,EAASF,EAAAA,GAAAA,EAAH,2F,SCbJ,SAASG,EAAT,GAAuC,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OACzC,OACE,UAACN,EAAD,YACE,SAACE,EAAD,UAAOG,KACP,SAACF,EAAD,UAASG,O,gBCLFC,EAAeN,EAAAA,GAAAA,GAAH,wCCMV,SAASO,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEMC,GADWC,EAAAA,EAAAA,MAATC,KACaC,MAAM,cAAc,GAkBzC,OAhBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIL,GAAa,GAFjB,SAG2BM,EAAAA,EAAAA,gBAAoBL,GAH/C,OAGUM,EAHV,OAIIT,EAAWS,GAJf,gDAMIC,EAAAA,GAAAA,MAAY,KAAMC,SANtB,yBAQIT,GAAa,GARjB,6EADc,uBAAC,WAAD,wBAadU,KACC,CAACT,KAGF,gCACGF,IAAa,SAACY,EAAA,EAAD,KACd,SAACjB,EAAD,iBACGG,QADH,IACGA,OADH,EACGA,EAASe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACZ,SAACxB,EAAD,CAAqBC,KAAMsB,EAAQrB,OAAQsB,GAA1BF,a,uGC/BrBG,EAAQ,+BACRC,EAAU,mCACVC,EAAU,kCAEDC,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAgCC,GAAhC,kFACQC,EADR,UACiBL,EADjB,wCACyDC,EADzD,4BAEyBK,IAAAA,IAAUD,EAAKD,GAFxC,oBAEUG,EAFV,EAEUA,MAEEC,QAAQC,OAJpB,yCAKWC,QAAQC,OACb,IAAIC,MAAM,oDANhB,gCASSC,EAAiBN,EAAKC,UAT/B,kEAYeM,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAgCC,EAAOX,GAAvC,kFACQC,EADR,UACiBL,EADjB,iCACkDC,EADlD,kBACmEc,EADnE,4BAEyBT,IAAAA,IAAUD,EAAKD,GAFxC,oBAEUG,EAFV,EAEUA,MAEEC,QAAQC,OAJpB,yCAKWC,QAAQC,OACb,IAAIC,MAAJ,2CAA8CG,EAA9C,QANN,gCAUSF,EAAiBN,EAAKC,UAV/B,kEAaeQ,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BnB,EAAIO,GAAhC,kFACQC,EADR,UACiBL,EADjB,kBACmCH,EADnC,oBACiDI,EADjD,4BAEyBK,IAAAA,IAAUD,EAAKD,GAFxC,mBAEUG,EAFV,EAEUA,KAFV,yCAKWG,QAAQC,OACb,IAAIC,MAAM,oDANhB,gCAUSK,EAAgBV,IAVzB,kEAaeW,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA4BrB,EAAIO,GAAhC,kFACQC,EADR,UACiBL,EADjB,kBACmCH,EADnC,4BACyDI,EADzD,4BAEyBK,IAAAA,IAAUD,EAAKD,GAFxC,oBAEUG,EAFV,EAEUA,MAEEY,KAAKV,OAJjB,yCAKWC,QAAQC,OAAO,IAAIC,MAAM,4CALpC,gCAOSQ,EAAeb,EAAKY,OAP7B,kEAUeE,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA+BxB,EAAIO,GAAnC,kFACQC,EADR,UACiBL,EADjB,kBACmCH,EADnC,4BACyDI,EADzD,4BAEyBK,IAAAA,IAAUD,EAAKD,GAFxC,oBAEUG,EAFV,EAEUA,MAEEC,QAAQC,OAJpB,yCAKWC,QAAQC,OACb,IAAIC,MAAM,+CANhB,gCASSL,EAAKC,SATd,kEAYA,SAASK,EAAiBS,GACxB,OAAOA,EAAO1B,KAAI,SAAA2B,GAAK,yBAClBA,GADkB,IAErBC,YAAaC,EAAgBF,EAAMC,kBAIvC,SAASP,EAAgBM,GACvB,IAAMG,EAASH,EAAMG,OAAO9B,KAAI,SAAA+B,GAAK,OAAIA,EAAMnD,QAAMoD,KAAK,KAE1D,MAAO,CACLC,MAAON,EAAMO,eACbC,SAAUR,EAAMQ,SAChBC,UAAU,GAAD,OAA0B,GAArBT,EAAMU,aAAX,KACTP,OAAAA,EACAQ,IAAKT,EAAgBF,EAAMC,cAI/B,SAASJ,EAAeD,GACtB,OAAOA,EAAKvB,KAAI,SAAAuC,GAAI,MAAK,CACvBtC,GAAIsC,EAAKC,QACT5D,KAAM2D,EAAK3D,KACX0D,IAAKC,EAAKE,aAAL,UAAuBnC,GAAvB,OAAiCiC,EAAKE,cAAiBC,EAC5DC,UAAWJ,EAAKI,cAIpB,SAASd,EAAgBe,GACvB,OAAOA,EAAI,UAAMtC,GAAN,OAAgBsC,GAASC,EAGtC,IAAMnD,EAAM,CACVa,iBA/FF,SAEgC,GAAjBA,OAAAA,EAAAA,MAAAA,KAAAA,YA8FbW,iBA9FF,SAYgC,EAAjBA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAmFbE,aAnFF,SAa4B,EAAbA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAuEbE,aAvEF,SAa4B,EAAbA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YA2DbG,gBA3DF,SAU+B,EAAhBA,GAAAA,OAAAA,EAAAA,MAAAA,KAAAA,aAoDf,O","sources":["components/ReviewItem/ReviewItem.styles.js","components/ReviewItem/ReviewItem.jsx","components/Reviews/Reviews.styles.js","components/Reviews/Reviews.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  padding-top: 10px;\n  padding-bottom: 10px;\n\n  &:nth-child(2n) {\n    background-color: #eee;\n  }\n`;\n\nexport const Name = styled.h3`\n  font-size: 16px;\n  margin-bottom: 10px;\n`;\n\nexport const Review = styled.p`\n  padding-left: 10px;\n  padding-right: 10px;\n  font-size: 16px;\n`;\n","import PropTypes from 'prop-types';\nimport { Review, Item, Name } from './ReviewItem.styles';\n\nexport default function ReviewItem({ name, review }) {\n  return (\n    <Item>\n      <Name>{name}</Name>\n      <Review>{review}</Review>\n    </Item>\n  );\n}\n\nReviewItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  review: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ReviewStyled = styled.ul`\n  width: 100%;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport Loader from 'components/Loader';\nimport ReviewItem from 'components/ReviewItem';\nimport api from '../../services/moviesApi';\nimport { ReviewStyled } from './Reviews.styles.js';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { slug } = useParams();\n  const movieId = slug.match(/[a-z0-9]+$/)[0];\n\n  useEffect(() => {\n    async function getReviews() {\n      try {\n        setIsLoading(true);\n        const response = await api.getMovieReviews(movieId);\n        setReviews(response);\n      } catch (error) {\n        toast.error(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <ReviewStyled>\n        {reviews?.map(({ id, author, content }) => (\n          <ReviewItem key={id} name={author} review={content} />\n        ))}\n      </ReviewStyled>\n    </>\n  );\n}\n","import axios from 'axios';\nimport defaultImage from '../images/defaultImage.jpg';\nimport noImageAvailable from '../images/noImageAvailable.jpg';\n\nconst BASE_URL = `https://api.themoviedb.org/3`;\nconst KEY_API = '0a44406a328e0c9276ca96d909ee6267';\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function getMoviesByTrend(config) {\n  const url = `${BASE_URL}/trending/movie/week?api_key=${KEY_API}&language=ru-US`;\n  const { data } = await axios.get(url, config);\n\n  if (!data.results.length) {\n    return Promise.reject(\n      new Error('Sorry, the service is temporarily unavailable.')\n    );\n  }\n  return normalizedImgUrl(data.results);\n}\n\nasync function getMoviesByQuery(query, config) {\n  const url = `${BASE_URL}/search/movie?api_key=${KEY_API}&query=${query}&language=ru-US`;\n  const { data } = await axios.get(url, config);\n\n  if (!data.results.length) {\n    return Promise.reject(\n      new Error(`Sorry, no results were found for ${query}.`)\n    );\n  }\n\n  return normalizedImgUrl(data.results);\n}\n\nasync function getMovieById(id, config) {\n  const url = `${BASE_URL}/movie/${id}?api_key=${KEY_API}&language=ru-US`;\n  const { data } = await axios.get(url, config);\n\n  if (!data) {\n    return Promise.reject(\n      new Error('Sorry, the service is temporarily unavailable.')\n    );\n  }\n\n  return normalizedMovie(data);\n}\n\nasync function getMovieCast(id, config) {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${KEY_API}&language=ru-US`;\n  const { data } = await axios.get(url, config);\n\n  if (!data.cast.length) {\n    return Promise.reject(new Error('We don`t have any cast for this movie.'));\n  }\n  return normalizedCast(data.cast);\n}\n\nasync function getMovieReviews(id, config) {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${KEY_API}&language=ru-US`;\n  const { data } = await axios.get(url, config);\n\n  if (!data.results.length) {\n    return Promise.reject(\n      new Error('We don`t have any reviews for this movie.')\n    );\n  }\n  return data.results;\n}\n\nfunction normalizedImgUrl(movies) {\n  return movies.map(movie => ({\n    ...movie,\n    poster_path: checkPosterPath(movie.poster_path),\n  }));\n}\n\nfunction normalizedMovie(movie) {\n  const genres = movie.genres.map(genre => genre.name).join(' ');\n\n  return {\n    title: movie.original_title,\n    overview: movie.overview,\n    userScore: `${movie.vote_average * 10}%`,\n    genres,\n    src: checkPosterPath(movie.poster_path),\n  };\n}\n\nfunction normalizedCast(cast) {\n  return cast.map(item => ({\n    id: item.cast_id,\n    name: item.name,\n    src: item.profile_path ? `${IMG_URL}${item.profile_path}` : defaultImage,\n    character: item.character,\n  }));\n}\n\nfunction checkPosterPath(path) {\n  return path ? `${IMG_URL}${path}` : noImageAvailable;\n}\n\nconst api = {\n  getMoviesByTrend,\n  getMoviesByQuery,\n  getMovieById,\n  getMovieCast,\n  getMovieReviews,\n};\n\nexport default api;\n"],"names":["Item","styled","Name","Review","ReviewItem","name","review","ReviewStyled","Reviews","useState","reviews","setReviews","isLoading","setIsLoading","movieId","useParams","slug","match","useEffect","api","response","toast","message","getReviews","Loader","map","id","author","content","BASE_URL","KEY_API","IMG_URL","getMoviesByTrend","config","url","axios","data","results","length","Promise","reject","Error","normalizedImgUrl","getMoviesByQuery","query","getMovieById","normalizedMovie","getMovieCast","cast","normalizedCast","getMovieReviews","movies","movie","poster_path","checkPosterPath","genres","genre","join","title","original_title","overview","userScore","vote_average","src","item","cast_id","profile_path","defaultImage","character","path","noImageAvailable"],"sourceRoot":""}