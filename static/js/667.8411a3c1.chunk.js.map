{"version":3,"file":"static/js/667.8411a3c1.chunk.js","mappings":"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","sources":["components/CastItem/CastItem.styles.js","components/CastItem/CastItem.jsx","components/Cast/Cast.styles.js","components/Cast/Cast.jsx","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Item = styled.li`\n  width: calc((100% - 60px) / 5);\n  padding-bottom: 10px;\n`;\n\nexport const Poster = styled.img`\n  display: block;\n  width: 228px;\n  height: 342px;\n  object-fit: cover;\n  margin-bottom: 10px;\n`;\n\nexport const Name = styled.p`\n  font-size: 16px;\n  margin-bottom: 10px;\n`;\n\nexport const Character = styled.p`\n  font-size: 16px;\n`;\n","import PropTypes from 'prop-types';\nimport { Character, Item, Name, Poster } from './CastItem.styles';\n\nexport default function CastItem({ src, name, character }) {\n  return (\n    <Item>\n      <Poster src={src} />\n      <Name>\n        <b>Name:</b> {name}\n      </Name>\n      <Character>\n        <b>Character:</b> {character}\n      </Character>\n    </Item>\n  );\n}\n\nCastItem.propTypes = {\n  src: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const CastStyled = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  padding-top: 15px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport Loader from 'components/Loader';\nimport CastItem from 'components/CastItem';\nimport api from '../../services/moviesApi';\nimport { CastStyled } from './Cast.styles.js';\n\nexport default function Cast() {\n  const [cast, setCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { slug } = useParams();\n  const movieId = slug.match(/[a-z0-9]+$/)[0];\n\n  useEffect(() => {\n    async function getMoviesCast() {\n      try {\n        setIsLoading(true);\n        const response = await api.getMovieCast(movieId);\n        setCast(response);\n      } catch (error) {\n        toast.error(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    getMoviesCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <CastStyled>\n        {cast?.map(({ id, src, name, character }) => (\n          <CastItem key={id} src={src} name={name} character={character} />\n        ))}\n      </CastStyled>\n    </>\n  );\n}\n","import axios from 'axios';\nimport defaultImage from '../images/defaultImage.jpg';\nimport noImageAvailable from '../images/noImageAvailable.jpg';\n\nconst BASE_URL = `https://api.themoviedb.org/3`;\nconst KEY_API = '0a44406a328e0c9276ca96d909ee6267';\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function getMoviesByTrend(config) {\n  const url = `${BASE_URL}/trending/movie/week?api_key=${KEY_API}&language=ru-US`;\n  const { data } = await axios.get(url, config);\n\n  if (!data.results.length) {\n    return Promise.reject(\n      new Error('Sorry, the service is temporarily unavailable.')\n    );\n  }\n  return normalizedImgUrl(data.results);\n}\n\nasync function getMoviesByQuery(query, config) {\n  const url = `${BASE_URL}/search/movie?api_key=${KEY_API}&query=${query}&language=ru-US`;\n  const { data } = await axios.get(url, config);\n\n  if (!data.results.length) {\n    return Promise.reject(\n      new Error(`Sorry, no results were found for ${query}.`)\n    );\n  }\n\n  return normalizedImgUrl(data.results);\n}\n\nasync function getMovieById(id, config) {\n  const url = `${BASE_URL}/movie/${id}?api_key=${KEY_API}&language=ru-US`;\n  const { data } = await axios.get(url, config);\n\n  if (!data) {\n    return Promise.reject(\n      new Error('Sorry, the service is temporarily unavailable.')\n    );\n  }\n\n  return normalizedMovie(data);\n}\n\nasync function getMovieCast(id, config) {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${KEY_API}&language=ru-US`;\n  const { data } = await axios.get(url, config);\n\n  if (!data.cast.length) {\n    return Promise.reject(new Error('We don`t have any cast for this movie.'));\n  }\n  return normalizedCast(data.cast);\n}\n\nasync function getMovieReviews(id, config) {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${KEY_API}&language=ru-US`;\n  const { data } = await axios.get(url, config);\n\n  if (!data.results.length) {\n    return Promise.reject(\n      new Error('We don`t have any reviews for this movie.')\n    );\n  }\n  return data.results;\n}\n\nfunction normalizedImgUrl(movies) {\n  return movies.map(movie => ({\n    ...movie,\n    poster_path: checkPosterPath(movie.poster_path),\n  }));\n}\n\nfunction normalizedMovie(movie) {\n  const genres = movie.genres.map(genre => genre.name).join(' ');\n\n  return {\n    title: movie.original_title,\n    overview: movie.overview,\n    userScore: `${movie.vote_average * 10}%`,\n    genres,\n    src: checkPosterPath(movie.poster_path),\n  };\n}\n\nfunction normalizedCast(cast) {\n  return cast.map(item => ({\n    id: item.cast_id,\n    name: item.name,\n    src: item.profile_path ? `${IMG_URL}${item.profile_path}` : defaultImage,\n    character: item.character,\n  }));\n}\n\nfunction checkPosterPath(path) {\n  return path ? `${IMG_URL}${path}` : noImageAvailable;\n}\n\nconst api = {\n  getMoviesByTrend,\n  getMoviesByQuery,\n  getMovieById,\n  getMovieCast,\n  getMovieReviews,\n};\n\nexport default api;\n"],"names":["Item","styled","Poster","Name","Character","CastItem","src","name","character","CastStyled","Cast","useState","cast","setCast","isLoading","setIsLoading","movieId","useParams","slug","match","useEffect","api","response","toast","message","getMoviesCast","Loader","map","id","BASE_URL","KEY_API","IMG_URL","getMoviesByTrend","config","url","axios","data","results","length","Promise","reject","Error","normalizedImgUrl","getMoviesByQuery","query","getMovieById","normalizedMovie","getMovieCast","normalizedCast","getMovieReviews","movies","movie","poster_path","checkPosterPath","genres","genre","join","title","original_title","overview","userScore","vote_average","item","cast_id","profile_path","defaultImage","path","noImageAvailable"],"sourceRoot":""}